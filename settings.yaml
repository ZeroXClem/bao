server:
  port: ${PORT:8000}
  cors:
    enabled: True
    allow_origins: ["*"]
    allow_methods: ["*"]
    allow_headers: ["*"]
  auth:
    enabled: true
    # python -c 'import base64; print("Basic " + base64.b64encode("secret:key".encode()).decode())'
    # 'secret' is the username and 'key' is the password for basic auth by default
    # If the auth is enabled, this value must be set in the "Authorization" header of the request.
    secret: ${APP_SECRET}

crawler:
  source_type: youtube
  output_dir: data/youtube_lessons
  whisper_model: small
  transcript_merge_size: 300
  youtube_short_url_domain: "https://youtu.be"  
  youtube_url_domain: "https://www.youtube.com"
  youtube_short_url_domain: "https://youtu.be"

injest:
  chunk_size: 500
  chunk_overlap: 50
  injest_from: data/youtube_lessons
  injest_from: data/youtube_lessons
  default_topic: bao

llm:
  mode: openai
  max_new_tokens: 512
  context_window: 3900

embedding:
  mode: local
  embedding_size: 768

vectorstore:
  database: qdrant

qdrant:
  path: data/qdrant_store_test
  force_disable_check_same_thread: true

local:
  embedding_hf_model_name: intfloat/multilingual-e5-base

openai:
  api_key: ${OPENAI_API_KEY}
  eco_model: gpt-3.5-turbo-0125
  super_model: gpt-4-0125-preview

google_api:
  api_key: ${GOOGLE_API_KEY}
  model: gemini-pro

reranker:
  enabled: true
  cohere:
    api_key: ${COHERE_API_KEY}  
    k: 4
    model: rerank-multilingual-v2.0

web_chat:
  enabled: true
  title: "Your Youtube Asistant"
  header_color: "#6264f5"
  path: "/chatbot"
  path: "/baobot"
  btn_undo: "↩️ Delete Previous"
  btn_clear: "🗑️  Clear"
  btn_submit: "Submit"
  work_mode_label: "Mode"
  work_modes: 
    - "Ask Question"
    - "Search"
  max_history_message_len: 50
  max_history_len: 3
  frequently_asked_questions:
   - "Question 1"
   - "Question 2"
   - "Question 3"
  btn_undo: "Delete Previous"
  btn_clear: "Clear"
  btn_submit: "Submit"
  work_mode_label: ""
  work_modes: "Mode"
   - "Ask Question"
   - "Search"

discord:
  discord_token: ${DISCORD_TOKEN}
  bot_id: ${DISCORD_BOT_ID}
  chat_history_ttl: 3600
  max_history_len: 5
  max_history_message_len: 100
  fallback_message: >
   (⊙＿⊙') 我没有找到相关资料。如果你有其它问题，请随时提出。  Sorry, I couldn't find relevant information to answer your question. If you have any other questions, please feel free to ask.  
   ✌(-‿-)✌  ✌(-‿-)✌  ✌(-‿-)✌  ✌(-‿-)✌   
   想要搜索资料? 请在问题前加上 /s 
   如要提问，请直接问我 😯  
  frequently_asked_questions:
   - "Question 1?"
   - "Question 2?"
   - "Question 3?"

retriever:
  k: 10
  collection_name: bao
  score_threshold: 0.83
  metadata:
    video: str
    pub_date: str
    source: str
    title: str
    start_at: int
    pub_year: str
    pub_year_month: str
    topic: str
    chunk_no: int


chain_templates:
  intent_classify_model: gpt-3.5
  # remember to customise below according to the topics existed in your real senarios
  intent_classify_template: >
    Do not answer the question. Instead, you need to follow below steps to generate a JSON object with following fields to classify the question: type: “greeting”, "MY Category", Others" (string) confidence: 0.0 to 1.0 (float)
    Steps:
    1.Intention classification rules, blabla
    2.当有如下意向时归类为"greeting":
      abc
    4.当符合如下意向时归类为"My Class":
      cde
    5.当不确定或不能归为上面的类别时，归类为"Others"，比如：
      def
      其它问题
  answer_model: gpt-3.5-instruct
  answer_template: >
    你是一位阅读分析和写作领域的专家。请仅使用以下代码块中的内容回答问题，要求准确。如果你不知道答案，请不要回复。\nContext:```{context}```
  greeting_model: gemini
  greeting_template: >
    你是文档聊天机器人Bob ，请根据三重反引号中的内容回答用户的提问，在回答的最后如果有必要你可以根据如下三重反引号中的信息详细介绍自己，并告诉用户怎么提问。
    你的回答可以是markdown格式，要求回答全面和清晰。如果不清楚，请不要回答：
    ```我的名字是Bob 
    blablabla
    ```
    Input: {question}
    Output:

  query_rewrite_model: gpt-3.5-instruct
  query_rewrite_template: >
    DO NOT answer the question. Instead, you need to follow below steps one by one to generate a valid JSON object with following fields:
    1.If there exists a explicit date to describe直播,视频, please store it in "pub-date" in the format yyyyMMdd. Otherwise, do not extract it.
    2.if there exists a explicit year numbers to describe直播,视频，请将其以yyyy格式存入 "pub-year". Otherwise, do not extract it.
    3.if there exists a explicit year and month to describe直播,视频，请将其以yyyyMM格式存入 "pub-year-month". Otherwise, do not extract it.
    Note，each character in the value of "pub-date", "pub-year", "pub-year-month" should be in '0'-'9'
    4.如果有直播或视频播放链接，请提取并存入 "video"，否则不要提取
    5.构建一个可以在没有聊天历史的情况下可被理解的独立问题。不要回答问题，只需重新构造它,放入 "query". You need to remove any date,year, month and links from "query"
    7.Ensemble the above fields into a valid json object then return it.